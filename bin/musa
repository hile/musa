#!/usr/bin/env python
"""
Music tagging command
"""

import os,sys

from musa.cli import MusaScript,MusaCommand
from musa.tree import Tree,Track,TreeError

class AlbumArtCommand(MusaCommand):
    def __init__(self,script,name,helptext):
        MusaCommand.__init__(self,script,name,helptext)
        self.parser.add_argument('-e','--embed',action='store_true',
            help='Embed artwork file'
        )
        self.parser.add_argument('-x','--extract',action='store_true',
            help='Extract artwork file'
        )
        self.parser.add_argument('-u','--url',
            help='Fetch artwork from given url'
        )

class TagsCommand(MusaCommand):
    def __init__(self,script,name,helptext):
        MusaCommand.__init__(self,script,name,helptext)
        self.parser.add_argument('-s','--set',action='append', 
            help='Set tag from value (tag=value)'
        )
        self.parser.add_argument('-i','--input-file',
            help='Set new tags from input file'
        )
        self.parser.add_argument('-l','--list',action='store_true',
            help='List tags in given files'
        )
        self.parser.add_argument('-p','--print-path',action='store_true',
            help='Print file path before tags'
        )
        self.parser.add_argument('-P','--path-format',
            help='String format for --print-path flag'
        )
        self.parser.add_argument('paths', metavar='path', nargs='*',
            default=[os.getcwd()],
            help='Files to process'
        )

    def get_tags(self,track):
        try:
            return track.tags
        except TreeError,emsg:
            return None

    def print_tags(self,track,print_path=False,path_format=None):
        if path_format is None:
            path_format = '### %s'

        tags = self.get_tags(track)
        if tags is None:
            return
        if print_path: 
            print path_format % track.path
        for k,v in tags.items():
            print k,v

    def update_tags(self,track,tags):
        track_tags = self.get_tags(track)
        if track_tags is None:
            return None
        return track_tags.update_tags(tags)

    def parse_args(self,args):
        dirs,tracks = MusaCommand.parse_args(self,args)

        if args.set:
            tags = dict(map(lambda v: v.split('=',1), args.set))
            for target in dirs + tracks:
                if isinstance(target,Tree):
                    for track in target:
                        self.update_tags(track,tags)
                elif isinstance(target,Track):
                    self.update_tags(target,tags)

        if args.list:
            for target in dirs + tracks:
                if isinstance(target,Tree):
                    for track in target:
                        self.print_tags(track,args.print_path,args.path_format)
                elif isinstance(target,Track):
                    self.print_tags(target,args.print_path,args.path_format)

class TreeCommand(MusaCommand):
    def __init__(self,script,name,helptext):
        MusaCommand.__init__(self,script,name,helptext)
        self.parser.add_argument('-l','--list',action='store_true',
            help='List trees or files'
        )
        self.parser.add_argument('paths', metavar='path', nargs='*',
            default=[os.getcwd()],
            help='Files to process'
        )

    def list_trees(self,dirs):
        for tree in dirs:
            print '%s: %d music files' % (tree.path,len(tree))

    def parse_args(self,args):
        dirs,tracks = MusaCommand.parse_args(self,args)

        if args.list:
            self.list_trees(dirs)

script = MusaScript()
AlbumArtCommand(script,'albumart','Manage music file album art')
TagsCommand(script,'tags','Manage music file tags')
TreeCommand(script,'tree','Manage music trees')
args = script.parse_args()

command = script.commands[args.command]
command.parse_args(args)

